Affichage du contenu des fichiers .cpp dans le r√©pertoire src :
Contenu de .\src\entity.cpp :
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <vector>

#include "entity.h"

Entity::Entity(float p_x, float p_y, std::vector<SDL_Texture*> p_tex)
:x(p_x), y(p_y), tex(p_tex)
{
	currentFrame.x = 0;
	currentFrame.y = 0;
	SDL_QueryTexture(p_tex.at(0), NULL, NULL, &currentFrame.w, &currentFrame.h);
	for (int i = 0; i < getSize(); i++)
	{
		animOffsetsX.push_back(0);
		animOffsetsY.push_back(0);
	}
}

Entity::Entity(float p_x, float p_y, SDL_Texture* p_tex)
:x(p_x), y(p_y)
{
	tex.push_back(p_tex);
	currentFrame.x = 0;
	currentFrame.y = 0;
	SDL_QueryTexture(p_tex, NULL, NULL, &currentFrame.w, &currentFrame.h);
	for (int i = 0; i < getSize(); i++)
	{
		animOffsetsX.push_back(0);
		animOffsetsY.push_back(0);
	}
}

float Entity::getX()
{
	return x;
}

float Entity::getY()
{
	return y;
}

int Entity::getWidth()
{
	return currentFrame.w;
}

int Entity::getHeight()
{
	return currentFrame.h;
}

int Entity::getSize()
{
	return tex.size();
}

void Entity::setX(float p_x)
{
	x = p_x;
}

void Entity::setY(float p_y)
{
	y = p_y;
}

float Entity::getAnimOffsetX(int p_index)
{
	return animOffsetsX.at(p_index);
}

float Entity::getAnimOffsetY(int p_index)
{
	return animOffsetsY.at(p_index);
}

void Entity::setAnimOffsetX(int p_index, int p_value)
{
	animOffsetsX[p_index] = p_value;
}

void Entity::setAnimOffsetY(int p_index, int p_value)
{
	animOffsetsY[p_index] = p_value;
}

SDL_Texture* Entity::getTex(int p_index)
{
	return tex.at(p_index);
}

SDL_Rect Entity::getCurrentFrame()
{
	return currentFrame;
}

void Entity::setTex(SDL_Texture* p_tex)
{
	tex[0] = p_tex;
}-----------------------------------
Contenu de .\src\main.cpp :
#ifdef __EMSCRIPTEN__
#include <emscripten.h>
#include <emscripten/html5.h>
#endif


#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_ttf.h>
#include <SDL2/SDL_mixer.h>
#include <iostream>
#include <vector>
#include <ctime>
#include <cmath>
#include <stdlib.h>
#include <deque>

#include "renderwindow.h"
#include "entity.h"
#include "player.h"

 
const int ALIVE = 0;
const int HOLE_DEATH = 2;

const Uint8 *keyState;

RenderWindow window;

std::vector<SDL_Texture*> playerTex; 
SDL_Texture* arrow;
SDL_Texture* highscoreBox;
SDL_Texture* deathOverlay;
// SDL_Texture* logo;

SDL_Texture* far;
SDL_Texture* foregroundMerged;
SDL_Texture* foreground1;
SDL_Texture* foreground2;
SDL_Texture* sand;

TTF_Font* font32;
TTF_Font* font32_outline;
TTF_Font* font24;
TTF_Font* font16;

SDL_Color white = { 255, 255, 255 };
SDL_Color black = { 0, 0, 0 };

Mix_Chunk* jumpSfx;
Mix_Chunk* fallSfx;
Mix_Chunk* hitSfx;
Mix_Chunk* clickSfx;

Uint32 lastTime = SDL_GetTicks();
Uint32 currentTime;
float deltaTime;

bool gameRunning = true;
bool playedDeathSFX = false;
bool mainMenu = true;

bool init()
{
	SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO);
	IMG_Init(IMG_INIT_PNG);
	TTF_Init();

	window.create("Ocean Explorer", RenderWindow::getWidth(), RenderWindow::getHeight() );
	Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 2048);

	srand((unsigned)time(0));

	playerTex.push_back(window.loadTexture("res/textures/player/player_0.png"));
	playerTex.push_back(window.loadTexture("res/textures/player/player_1.png"));
	playerTex.push_back(window.loadTexture("res/textures/player/player_2.png"));
	playerTex.push_back(window.loadTexture("res/textures/player/player_3.png"));
	playerTex.push_back(window.loadTexture("res/textures/player/player_4.png"));

	far = window.loadTexture("res/textures/background/far.png");
    foregroundMerged = window.loadTexture("res/textures/background/foregound-merged.png");
    foreground1 = window.loadTexture("res/textures/background/foreground-1.png");
    foreground2 = window.loadTexture("res/textures/background/foreground-2.png");
    sand = window.loadTexture("res/textures/background/sand.png");

	arrow = window.loadTexture("res/textures/arrow.png");
	highscoreBox = window.loadTexture("res/textures/highscore_box.png");
	deathOverlay = window.loadTexture("res/textures/death_overlay.png");
	// logo = window.loadTexture("res/textures/logo.png");

	font32 = TTF_OpenFont("res/fonts/cocogoose.ttf", 32);
	font32_outline = TTF_OpenFont("res/fonts/cocogoose.ttf", 32);
	font24 = TTF_OpenFont("res/fonts/cocogoose.ttf", 24);
	font16 = TTF_OpenFont("res/fonts/cocogoose.ttf", 16);
	TTF_SetFontOutline(font32_outline, 3); 

	jumpSfx = Mix_LoadWAV("res/sounds/jump.wav");
	fallSfx = Mix_LoadWAV("res/sounds/fall.wav");
	hitSfx = Mix_LoadWAV("res/sounds/hit.wav");
	clickSfx = Mix_LoadWAV("res/sounds/click.wav");
	Mix_PlayChannel(-1, jumpSfx, 0);

	return true;
}

struct BackgroundLayer {
    float positionx;
	float positiony;
    float speed;
    SDL_Texture* texture;
    int width;
    int height;
};

std::deque<BackgroundLayer> backgroundLayers;

bool initBackgroundLayers() {
    backgroundLayers.push_back({0,0, 25.0f, far, 256, 192});
    backgroundLayers.push_back({0, 0, 40.0f, sand, 256, 192}); 
	backgroundLayers.push_back({0, 0, 60.0f, foregroundMerged, 512, 192});
    return true;
}

void renderRepeatingBackground() {

    for (auto& bg : backgroundLayers) {
        bg.positionx -= bg.speed * deltaTime;

        // Render the background layer multiple times to cover the entire screen
        int x = static_cast<int>(bg.positionx);
		int y = 0;
        while (x < RenderWindow::getWidth()) {
            // Calculate scaled dimensions to fit the screen
            float scaleX = static_cast<float>(RenderWindow::getWidth()) / bg.width;
            float scaleY = static_cast<float>(RenderWindow::getHeight() ) / bg.height;
            int scaledWidth = static_cast<int>(bg.width * scaleX);
            int scaledHeight = static_cast<int>(bg.height * scaleY);

            // Render the background layer with scaled dimensions
            SDL_Rect dstRect = {x, y, scaledWidth, scaledHeight};
            SDL_RenderCopy(window.getRenderer(), bg.texture, nullptr, &dstRect);
            x += scaledWidth;
        }
    }
}


bool load = init();

Player player(RenderWindow::getWidth() / 2, RenderWindow::getHeight() - 64, playerTex);

void reset()
{
	player.reset();
}
void gameLoop()
{
	SDL_Event event;
	
    currentTime = SDL_GetTicks();
    deltaTime = (currentTime - lastTime) / 1000.0f; 
    lastTime = currentTime;

 	while (SDL_PollEvent(&event)) 
 	{
    	switch (event.type) {
			case SDL_QUIT: 
			{
				gameRunning = false;
				break;
			}
			case SDL_MOUSEBUTTONDOWN:
			{
				if (mainMenu)
				{
					if (event.button.button == SDL_BUTTON_LEFT && SDL_GetTicks() > 2500)
					{
						mainMenu = false;
						Mix_PlayChannel(-1, clickSfx, 0);
					}
				}
				else 
				{
					if (event.button.button == SDL_BUTTON_LEFT && player.isDead() == ALIVE)
					{

						// handle player input
					}
					else if (player.isDead() != ALIVE)
					{
						Mix_PlayChannel(-1, clickSfx, 0);
						reset();
						playedDeathSFX = false;
					}
				}
				break;
			}
			case SDL_WINDOWEVENT:
			{
				if (event.window.event == SDL_WINDOWEVENT_SIZE_CHANGED) {
                    int newWidth = event.window.data1;
                    int newHeight = event.window.data2;
                    RenderWindow::handleWindowResize(newWidth, newHeight);
                }
                break;
			}
    	}
	}
	if (mainMenu)
	{
		if (SDL_GetTicks() < 2500)
		{
			window.clear();
			window.renderCenter(0, sin(SDL_GetTicks()/100) * 2 - 4, "EUHHH JSP", font24, white);
			window.display();
		}
		else 
		{
			window.clear();
			renderRepeatingBackground();

			// window.render(SCREEN_WIDTH/2 - 234, SCREEN_HEIGHT/2 - 94 - 30, logo);
			window.renderCenter(0, 90 + sin(SDL_GetTicks()/100) * 2, "Click to start", font24, white);
			window.display();
		}
	}
	else
	{
		if (player.isDead() == ALIVE)
		{
			player.update(deltaTime);
		}
		else if (!playedDeathSFX) {
			
			if (player.isDead() == HOLE_DEATH)
			{
				Mix_PlayChannel(-1, fallSfx, 0);
			}
			playedDeathSFX = true;
		}

		window.clear();
        renderRepeatingBackground();

		window.render(player);
		window.render(25, 30, arrow);
		window.render(62, 20, player.getScore(), font32_outline, black);
		window.render(65, 23, player.getScore(), font32, white);
		window.render(0, 65, highscoreBox);
		window.render(65, 64, player.getHighscore(), font16, white);

		if (player.isDead() != ALIVE)
		{
			window.render(deathOverlay, 800, 480);
			
			if (player.isDead() == HOLE_DEATH)
			{
				window.renderCenter(0, -24, "The Ocean is a dangerous place.", font24, white);
			}
			window.renderCenter(0, 12, "Click to retry.", font16, white);
		}

		
		int mouseX, mouseY;
		SDL_GetMouseState(&mouseX, &mouseY);
		SDL_Color attractionZoneColor = {0, 255, 0, 255};
		window.drawCircle(mouseX, mouseY, 100.0f, attractionZoneColor, false);
		window.display();
	}
}

int main(int argc, char* args[])
{
	initBackgroundLayers();
	SDL_SetWindowResizable(window.getWindow(), SDL_TRUE);

	#ifdef __EMSCRIPTEN__
	emscripten_set_main_loop(gameLoop, 0, 1);
	#else
	while (gameRunning) 
	{
    	gameLoop();
    	SDL_Delay(16);
	}
	#endif

	window.cleanUp();
	TTF_CloseFont(font32);
	TTF_CloseFont(font32_outline);
	TTF_CloseFont(font24);
	TTF_CloseFont(font16);
	TTF_Quit();
	SDL_Quit();

	return 0;
}-----------------------------------
Contenu de .\src\player.cpp :
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <cmath>
#include <vector>
#include <string>

#include "player.h"
#include "renderwindow.h"
#include "entity.h"

const float GRAVITY = 9.81;
const float WATER_DRAG = 1;
const int ALIVE = 0;
const int HOLE_DEATH = 2;

Player::Player(float p_x, float p_y, std::vector<SDL_Texture*> p_tex)
	: Entity{ p_x, p_y, p_tex}, velocityX(0), velocityY(0), dead(0)
{
	setX(RenderWindow::getWidth() / 2 - getWidth() / 2);
	setY(RenderWindow::getHeight() - getHeight() - 64);
}

float Player::distanceFromCursor()
{
	int mouseX = 0;
	int mouseY = 0;
	SDL_GetMouseState(&mouseX, &mouseY);

	return sqrt(pow((getX() + getWidth()/2) - mouseX, 2) + pow((getY() + getHeight()/2) - mouseY, 2));
}

void Player::moveWithCursor(float deltaTime)
{
	int mouseX = 0;
	int mouseY = 0;
	SDL_GetMouseState(&mouseX, &mouseY);

	float distance = distanceFromCursor();
	if (distance < 100)
	{
		velocityX += (mouseX - (getX() + getWidth() / 2)) * 0.1f * deltaTime;
		velocityY += (mouseY - (getY() + getHeight() / 2)) * 0.1f * deltaTime;
	}
	else
	{
		velocityX *= WATER_DRAG;
		velocityY *= WATER_DRAG;
	}

	velocityY += GRAVITY * deltaTime * 0.1f;

	setX(getX() + velocityX);
	setY(getY() + velocityY);

	// check if the player is out of bounds
	if (getX() < 0 || getX() > RenderWindow::getWidth() || getY() < -getHeight())
	{
		dead = HOLE_DEATH; // Changing to CURSOR_DEATH since the player is hitting a boundary
	}
	else if (getY() > RenderWindow::getHeight()  + getHeight())
	{
		dead = HOLE_DEATH;
	}
}

void Player::animEyes()
{
	int mouseX = 0;
	int mouseY = 0;
	SDL_GetMouseState(&mouseX, &mouseY);

	setAnimOffsetX(0, clamp(mouseX - getX() - getWidth()/2, -2.5, 2.5));
	setAnimOffsetY(0, clamp(mouseY - getY() - getHeight()/2 + 15, -2.5, 2.5));
}

void Player::update(float deltaTime)
{
	timer++;
	score = timer / 50; 
	if (score > highscore)
	{
		highscore = score;
	}

	setX(getX() - 1); //autoscroll
	animEyes();
	moveWithCursor(deltaTime);
}

const char* Player::getScore()
{
	std::string s = std::to_string(score);
	s = "TIME: " + s;
	return s.c_str();
}

const char* Player::getHighscore()
{
	std::string s = std::to_string(highscore);
	s = "BEST: " + s;
	return s.c_str();
}

int Player::getScoreInt()
{
	return score;
}

int Player::isDead()
{
	return dead;
}

void Player::reset()
{
	setX(RenderWindow::getWidth() / 2 - getWidth() / 2);
	setY(RenderWindow::getHeight()  - getHeight() - 64);
	score = 0;
	timer = 0;
	velocityX = 0;
	velocityY = 0;
	dead = 0;
}

float Player::clamp(float p_value, float p_min, float p_max)
{
	if (p_value > p_max)
		return p_max;
	if (p_value < p_min)
		return p_min;
	return p_value;
}
-----------------------------------
Contenu de .\src\renderwindow.cpp :
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_ttf.h>
#include <iostream>

#include "renderwindow.h"
#include "entity.h"

#include <cmath>

int SCREEN_WIDTH = 900;
int SCREEN_HEIGHT = 480;

RenderWindow::RenderWindow()
{

}

void RenderWindow::create(const char* p_title, int p_w, int p_h)
{
	window = SDL_CreateWindow(p_title, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, p_w, p_h, SDL_WINDOW_SHOWN);

	if (window == NULL)
		std::cout << "Window failed to init. Error: " << SDL_GetError() << std::endl;

	renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
}


SDL_Texture* RenderWindow::loadTexture(const char* p_filePath)
{
	SDL_Texture* texture = NULL; 
	texture = IMG_LoadTexture(renderer, p_filePath);

	if (texture == NULL)
		std::cout << "Failed to load texture. Error: " << SDL_GetError() << std::endl;

	return texture;
}

void RenderWindow::clear()
{
	SDL_SetRenderDrawColor(renderer, 90, 90, 90, 255);
	SDL_RenderClear(renderer);
}

void RenderWindow::render(Entity& p_entity)
{

	for (int i = p_entity.getSize() - 1; i >= 0; i--)
	{
		SDL_Rect src;
		src.x = p_entity.getCurrentFrame().x;
		src.y = p_entity.getCurrentFrame().y;
		src.w = p_entity.getCurrentFrame().w;
		src.h = p_entity.getCurrentFrame().h;

		SDL_Rect dst;
		dst.x = p_entity.getX() + p_entity.getAnimOffsetX(i);
		dst.y = p_entity.getY() + p_entity.getAnimOffsetY(i);
		dst.w = p_entity.getCurrentFrame().w;
		dst.h = p_entity.getCurrentFrame().h;

		SDL_RenderCopy(renderer, p_entity.getTex(i), &src, &dst);
	}
}

void RenderWindow::render(float p_x, float p_y, SDL_Texture* p_tex)
{
	SDL_Rect src;
	src.x = 0;
	src.y = 0;
	SDL_QueryTexture(p_tex, NULL, NULL, &src.w, &src.h); 

	SDL_Rect dst;
	dst.x = p_x;
	dst.y = p_y;
	dst.w = src.w;
	dst.h = src.h;

	SDL_RenderCopy(renderer, p_tex, &src, &dst);
}

void RenderWindow::render(SDL_Texture* p_tex, int width, int height)
{ 
	float scaleX = static_cast<float>(SCREEN_WIDTH) / width;
    float scaleY = static_cast<float>(SCREEN_HEIGHT ) / height;
    int scaledWidth = static_cast<int>(width * scaleX);
    int scaledHeight = static_cast<int>(height * scaleY);

    // Render the background layer with scaled dimensions
    SDL_Rect dstRect = {0, 0, scaledWidth, scaledHeight};
    SDL_RenderCopy(renderer, p_tex, nullptr, &dstRect);
}

void RenderWindow::render(float p_x, float p_y, const char* p_text, TTF_Font* font, SDL_Color textColor)
{
		SDL_Surface* surfaceMessage = TTF_RenderText_Blended( font, p_text, textColor);
		SDL_Texture* message = SDL_CreateTextureFromSurface(renderer, surfaceMessage);

		SDL_Rect src;
		src.x = 0;
		src.y = 0;
		src.w = surfaceMessage->w;
		src.h = surfaceMessage->h; 

		SDL_Rect dst;
		dst.x = p_x;
		dst.y = p_y;
		dst.w = src.w;
		dst.h = src.h;

		SDL_RenderCopy(renderer, message, &src, &dst);
		SDL_FreeSurface(surfaceMessage);
}

void RenderWindow::renderCenter(float p_x, float p_y, const char* p_text, TTF_Font* font, SDL_Color textColor)
{
		SDL_Surface* surfaceMessage = TTF_RenderText_Blended( font, p_text, textColor);
		SDL_Texture* message = SDL_CreateTextureFromSurface(renderer, surfaceMessage);

		SDL_Rect src;
		src.x = 0;
		src.y = 0;
		src.w = surfaceMessage->w;
		src.h = surfaceMessage->h; 

		SDL_Rect dst;
		dst.x = SCREEN_WIDTH/2 - src.w/2 + p_x;
		dst.y = SCREEN_HEIGHT/2 - src.h/2 + p_y;
		dst.w = src.w;
		dst.h = src.h;

		SDL_RenderCopy(renderer, message, &src, &dst);
		SDL_FreeSurface(surfaceMessage);
}

void RenderWindow::display()
{
	SDL_RenderPresent(renderer);
}

void RenderWindow::cleanUp()
{
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
}


// add field fill
void RenderWindow::drawCircle(int centreX, int centreY, int radius, SDL_Color color, bool fill)
{
	SDL_SetRenderDrawColor(renderer, color.r, color.g, color.b, color.a);
	for (double dy = 1; dy <= radius; dy += 1.0)
	{
		double dx = floor(sqrt((2.0 * radius * dy) - (dy * dy)));
		if (fill)
		{
			SDL_RenderDrawLine(renderer, centreX - dx, centreY + dy - radius, centreX + dx, centreY + dy - radius);
			SDL_RenderDrawLine(renderer, centreX - dx, centreY - dy + radius, centreX + dx, centreY - dy + radius);
		}
		else
		{
			SDL_RenderDrawPoint(renderer, centreX + dx, centreY + dy - radius);
			SDL_RenderDrawPoint(renderer, centreX - dx, centreY + dy - radius);
			SDL_RenderDrawPoint(renderer, centreX + dx, centreY - dy + radius);
			SDL_RenderDrawPoint(renderer, centreX - dx, centreY - dy + radius);
		}
	}
}

SDL_Renderer* RenderWindow::getRenderer()
{
	return renderer;
}

SDL_Window* RenderWindow::getWindow()
{
	return window;
}

void RenderWindow::handleWindowResize(int p_w, int p_h)
{
	SCREEN_WIDTH = p_w;
	SCREEN_HEIGHT = p_h;
}

int RenderWindow::getWidth()
{
	return SCREEN_WIDTH;
}

int RenderWindow::getHeight()
{
	return SCREEN_HEIGHT;
}-----------------------------------
Affichage du contenu des fichiers .h dans le r√©pertoire lib :
